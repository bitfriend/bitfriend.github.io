{"version":3,"sources":["components/ExpandableSectionButton.tsx","views/Farms/components/ToggleView.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/Spacer.tsx","components/ModalActions.tsx","components/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/types.ts","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons.tsx","views/Farms/index.tsx"],"names":["Wrapper","styled","div","theme","colors","primary","ExpandableSectionButton","onClick","expanded","t","useTranslation","aria-label","role","color","bold","defaultProps","ViewMode","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","process","tokenAddressString","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","justifyContent","width","height","href","symbol","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","farmImage","tokenSymbol","alignItems","mb","src","alt","flexDirection","split","variant","StyledSpacer","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledTokenInput","input","isWarning","shadows","warning","inset","text","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","onChange","onSelectMax","value","inputTitle","decimals","isBalanceZero","style","position","pl","fontSize","balance","balanceBigNumber","BigNumber","gt","lt","toLocaleString","toFixed","ROUND_DOWN","displayBalance","pattern","inputMode","step","min","placeholder","scale","mr","external","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","valNumber","fullBalanceNumber","handleChange","useCallback","e","currentTarget","validity","valid","replace","handleSelectMax","title","disabled","isFinite","eq","a","alignSelf","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","pid","referrer","onStake","useStake","onUnstake","useUnstake","location","useLocation","dispatch","useAppDispatch","account","useWeb3React","lpPrice","useLpTokenPrice","handleStake","amount","fetchFarmUserDataAsync","pids","handleUnstake","stakedBalanceBigNumber","getBalanceAmount","useModal","onPresentDeposit","onPresentWithdraw","Balance","getBalanceNumber","times","unit","prefix","some","item","pathname","includes","HarvestAction","earnings","onReward","useHarvest","cakePrice","usePriceCakeBusd","rawEarningsBalance","BIG_ZERO","earningsBusd","multipliedBy","toNumber","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","earningsAsString","lpAddress","getAddress","isApproved","isGreaterThan","lpContract","useERC20","onApprove","useApprove","handleApprove","console","error","textTransform","pr","lpSymbol","mt","UnlockButton","ApyButton","apr","ApyCalculatorModal","linkLabel","tokenPrice","linkHref","onPresentApyModal","event","stopPropagation","ml","AccentGradient","keyframes","StyledCardAccent","primaryBright","secondary","FCard","card","background","isPromotedFarm","radii","Divider","cardBorder","ExpandingWrapper","FarmCard","showExpandableSection","setShowExpandableSection","toLocaleLowerCase","liquidity","undefined","maximumFractionDigits","toUpperCase","earnLabel","dual","farmAPR","liquidityUrlPathParts","quoteToken","address","token","BASE_ADD_LIQUIDITY_URL","isCommunity","display","CardActionsContainer","getBscScanAddressUrl","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","IconImage","Image","Farm","image","label","useFarmUser","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","LiquidityWrapper","Liquidity","displayLiquidity","Number","ActionContainer","xl","ActionTitles","ActionContent","StyledButton","Button","earningsBigNumber","isZero","Staked","marginBottom","marginTop","expandAnimation","collapseAnimation","css","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","isActive","bsc","info","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","useDelayedUnmount","toggleActionPanel","useEffect","isXs","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","useRef","data","columns","rows","useTable","sortColumn","row","original","current","scrollIntoView","behavior","StyledMenu","ButtonMenu","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","url","useRouteMatch","useTheme","paddingX","as","Link","to","borderRadius","paddingLeft","paddingRight","backgroundColor","show","CardButton","IconButton","TableButton","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","TABLE","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","StyledImage","Title","Heading","attrs","backgroundAlt","Description","Farms","path","AddressZero","substring","isAddress","log","useFarms","farmsLP","userDataLoaded","query","setQuery","usePersistState","localStorageKey","setViewMode","sortOption","setSortOption","isArchived","isInactive","usePollFarmsData","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","lowercaseQuery","latinise","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","farmsStaked","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","PageHeader","Page","checked","Select","options","option","marginLeft","SearchInput","target","sort","b","exact","renderContent"],"mappings":"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","file":"static/js/5.3a266a93.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@heswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"primary\" bold>\r\n        {expanded ? t('Hide') : t('Details')}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ListViewIcon, CardViewIcon, IconButton } from '@heswap/uikit'\r\nimport useTheme from 'hooks/useTheme'\r\n\r\nexport enum ViewMode {\r\n  TABLE = 'TABLE',\r\n  CARD = 'CARD',\r\n}\r\n\r\ninterface ToggleViewProps {\r\n  viewMode: ViewMode\r\n  onToggle: (mode: ViewMode) => void\r\n}\r\n\r\nconst Container = styled.div`\r\n  margin-left: -8px;\r\n  border-radius: 8px;\r\n  background-color: rgb(16, 38, 72);\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 0;\r\n  }\r\n`\r\n\r\nconst CardButton = styled(IconButton)<{ toggled: boolean }>`\r\n  border-radius: 8px;\r\n  background-color: ${({ theme, toggled }) => toggled ? theme.colors.primary : 'transparent'};\r\n`;\r\n\r\nconst TableButton = styled(IconButton)<{ toggled: boolean }>`\r\n  border-radius: 8px;\r\n  background-color: ${({ theme, toggled }) => toggled ? theme.colors.primary : 'transparent'};\r\n`;\r\n\r\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\r\n  const handleToggle = (mode: ViewMode) => {\r\n    if (viewMode !== mode) {\r\n      onToggle(mode)\r\n    }\r\n  }\r\n  const { theme } = useTheme()\r\n\r\n  return (\r\n    <Container>\r\n      <CardButton\r\n        toggled={viewMode === ViewMode.CARD}\r\n        id=\"clickFarmCardView\"\r\n        onClick={() => handleToggle(ViewMode.CARD)}\r\n      >\r\n        <CardViewIcon color={theme.colors[viewMode === ViewMode.CARD ? 'backgroundAlt' : 'text']} />\r\n      </CardButton>\r\n      <TableButton\r\n        toggled={viewMode === ViewMode.TABLE}\r\n        id=\"clickFarmTableView\"\r\n        onClick={() => handleToggle(ViewMode.TABLE)}\r\n      >\r\n        <ListViewIcon color={theme.colors[viewMode === ViewMode.TABLE ? 'backgroundAlt' : 'text']} />\r\n      </TableButton>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ToggleView\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\nimport { getWbnbAddress } from './addressHelpers'\r\n\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const wBNBAddressString = getWbnbAddress()\r\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\r\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\r\n  const firstPart =\r\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'BNB' : quoteTokenAddressString\r\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'BNB' : tokenAddressString\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, LinkExternal, Skeleton } from '@heswap/uikit'\r\n\r\nexport interface ExpandableSectionProps {\r\n  bscScanAddress?: string\r\n  infoAddress?: string\r\n  removed?: boolean\r\n  totalValueFormatted?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  bscScanAddress,\r\n  infoAddress,\r\n  removed,\r\n  totalValueFormatted,\r\n  lpLabel,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Total Liquidity')}:</Text>\r\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\r\n      </Flex>\r\n      {!removed && (\r\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\r\n      )}\r\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\r\n      <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@heswap/uikit'\r\nimport { CommunityTag, CoreTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  farmImage?: string\r\n  tokenSymbol?: string\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  isCommunityFarm,\r\n  farmImage,\r\n  tokenSymbol,\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Image src={`${process.env.REACT_APP_PUBLIC_BASE}/images/farms/${farmImage}.svg`} alt={tokenSymbol} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\r\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport Spacer from './Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px 0;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n`\r\n\r\nexport default ModalActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Button, Input, InputProps, Flex, Link } from '@heswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BigNumber } from 'bignumber.js'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n  decimals?: number\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  width: 60px;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n`\r\n\r\nconst StyledErrorMessage = styled(Text)`\r\n  position: absolute;\r\n  bottom: -22px;\r\n  a {\r\n    display: inline;\r\n  }\r\n`\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n  max,\r\n  symbol,\r\n  onChange,\r\n  onSelectMax,\r\n  value,\r\n  addLiquidityUrl,\r\n  inputTitle,\r\n  decimals = 18,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  const displayBalance = (balance: string) => {\r\n    if (isBalanceZero) {\r\n      return '0'\r\n    }\r\n    const balanceBigNumber = new BigNumber(balance)\r\n    if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\r\n      return balanceBigNumber.toLocaleString()\r\n    }\r\n    return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }\r\n\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\r\n        </Flex>\r\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\r\n          <StyledInput\r\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\r\n            inputMode=\"decimal\"\r\n            step=\"any\"\r\n            min=\"0\"\r\n            onChange={onChange}\r\n            placeholder=\"0\"\r\n            value={value}\r\n          />\r\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\r\n            {t('Max')}\r\n          </Button>\r\n          <Text fontSize=\"16px\">{symbol}</Text>\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          {t('No tokens to stake')}:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {t('Get %symbol%', { symbol })}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal, LinkExternal } from '@heswap/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        inputTitle={t('Stake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\r\n        {t('Get %symbol%', { symbol: tokenName })}\r\n      </LinkExternal>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@heswap/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={t('Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import React, { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@heswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { useLpTokenPrice } from 'state/hooks'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  addLiquidityUrl?: string\r\n  referrer?: string\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  addLiquidityUrl,\r\n  referrer,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n  const location = useLocation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const lpPrice = useLpTokenPrice(tokenName)\r\n\r\n  const handleStake = async (amount: string) => {\r\n    await onStake(amount, referrer)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return stakedBalance.eq(0) ? (\r\n      <Button\r\n        onClick={onPresentDeposit}\r\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n      >\r\n        {t('Stake LP')}\r\n      </Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n        <IconButton\r\n          variant=\"tertiary\"\r\n          onClick={onPresentDeposit}\r\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n        >\r\n          <AddIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\r\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n          <Balance\r\n            fontSize=\"12px\"\r\n            color=\"textSubtle\"\r\n            decimals={2}\r\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\r\n            unit=\" USD\"\r\n            prefix=\"~\"\r\n          />\r\n        )}\r\n      </Flex>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@heswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport Balance from 'components/Balance'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n}\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid)\r\n  const cakePrice = usePriceCakeBusd()\r\n  const dispatch = useAppDispatch()\r\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\r\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\r\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n        {earningsBusd > 0 && (\r\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\r\n        )}\r\n      </Flex>\r\n      <Button\r\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\r\n        onClick={async () => {\r\n          setPendingTx(true)\r\n          await onReward()\r\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n\r\n          setPendingTx(false)\r\n        }}\r\n      >\r\n        {t('Harvest')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Text } from '@heswap/uikit'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n  referrer?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl, referrer }) => {\r\n  const { t } = useTranslation()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses } = farm\r\n  const {\r\n    allowance: allowanceAsString = 0,\r\n    tokenBalance: tokenBalanceAsString = 0,\r\n    stakedBalance: stakedBalanceAsString = 0,\r\n    earnings: earningsAsString = 0,\r\n  } = farm.userData || {}\r\n  const allowance = new BigNumber(allowanceAsString)\r\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\r\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\r\n  const earnings = new BigNumber(earningsAsString)\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const dispatch = useAppDispatch()\r\n\r\n  const lpContract = useERC20(lpAddress)\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={farm.lpSymbol}\r\n        pid={pid}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        referrer={referrer}\r\n      />\r\n    ) : (\r\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\r\n        {t('Approve Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          CAKE\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          {farm.lpSymbol}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { IconButton, useModal, CalculateIcon } from '@heswap/uikit'\r\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apr?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apr, addLiquidityUrl }) => {\r\n  const { t } = useTranslation()\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n      tokenPrice={cakePrice.toNumber()}\r\n      apr={apr}\r\n      linkHref={addLiquidityUrl}\r\n    />,\r\n  )\r\n\r\n  const handleClickButton = (event): void => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\r\n      <CalculateIcon width=\"18px\" />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@heswap/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { getBscScanAddressUrl } from 'utils/bscscan'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n  liquidity?: BigNumber\r\n}\r\n\r\nconst AccentGradient = keyframes`  \r\n  0% {\r\n    background-position: 50% 0%;\r\n  }\r\n  50% {\r\n    background-position: 50% 100%;\r\n  }\r\n  100% {\r\n    background-position: 50% 0%;\r\n  }\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: ${({ theme }) => `linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary})`};\r\n  background-size: 400% 400%;\r\n  animation: ${AccentGradient} 2s linear infinite;\r\n  border-radius: 32px;\r\n  position: absolute;\r\n  top: -1px;\r\n  right: -1px;\r\n  bottom: -3px;\r\n  left: -1px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div<{ isPromotedFarm: boolean }>`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: ${({ theme, isPromotedFarm }) => (isPromotedFarm ? '31px' : theme.radii.card)};\r\n  box-shadow: ${({ theme }) => theme.shadows.step};\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.cardBorder};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  account?: string\r\n  referrer?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, account, referrer }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n\r\n  const totalValueFormatted =\r\n    farm.liquidity && farm.liquidity.gt(0)\r\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n      : ''\r\n\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const earnLabel = farm.dual ? farm.dual.earnLabel : 'CAKE'\r\n\r\n  const farmAPR = farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: farm.quoteToken.address,\r\n    tokenAddress: farm.token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const isPromotedFarm = farm.token.symbol === 'CAKE'\r\n\r\n  return (\r\n    <FCard isPromotedFarm={isPromotedFarm}>\r\n      {isPromotedFarm && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        isCommunityFarm={farm.isCommunity}\r\n        farmImage={farmImage}\r\n        tokenSymbol={farm.token.symbol}\r\n      />\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text>{t('APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apr ? (\r\n              <>\r\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={farm.apr} />\r\n                {farmAPR}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Earn')}:</Text>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex>\r\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} referrer={referrer} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          bscScanAddress={getBscScanAddressUrl(farm.lpAddresses[process.env.REACT_APP_CHAIN_ID])}\r\n          infoAddress={`https://pancakeswap.info/pair/${lpAddress}`}\r\n          totalValueFormatted={totalValueFormatted}\r\n          lpLabel={lpLabel}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\r\nimport { Address } from 'config/constants/types'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Skeleton } from '@heswap/uikit'\r\n\r\nexport interface AprProps {\r\n  value: string\r\n  multiplier: string\r\n  lpLabel: string\r\n  tokenAddress?: Address\r\n  quoteTokenAddress?: Address\r\n  cakePrice: BigNumber\r\n  originalValue: number\r\n  hideButton?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.text};\r\n\r\n  button {\r\n    width: 20px;\r\n    height: 20px;\r\n\r\n    svg {\r\n      path {\r\n        fill: ${({ theme }) => theme.colors.textSubtle};\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst AprWrapper = styled.div`\r\n  min-width: 60px;\r\n  text-align: left;\r\n`\r\n\r\nconst Apr: React.FC<AprProps> = ({\r\n  value,\r\n  lpLabel,\r\n  tokenAddress,\r\n  quoteTokenAddress,\r\n  cakePrice,\r\n  originalValue,\r\n  hideButton = false,\r\n}) => {\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return originalValue !== 0 ? (\r\n    <Container>\r\n      {originalValue ? (\r\n        <>\r\n          <AprWrapper>{value}%</AprWrapper>\r\n          {!hideButton && (\r\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apr={originalValue} addLiquidityUrl={addLiquidityUrl} />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <AprWrapper>\r\n          <Skeleton width={60} />\r\n        </AprWrapper>\r\n      )}\r\n    </Container>\r\n  ) : (\r\n    <Container>\r\n      <AprWrapper>{originalValue}%</AprWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Apr\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useFarmUser } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Text, Image } from '@heswap/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\n\r\nexport interface FarmProps {\r\n  label: string\r\n  pid: number\r\n  image: string\r\n}\r\n\r\nconst IconImage = styled(Image)`\r\n  width: 24px;\r\n  height: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 40px;\r\n    height: 40px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  padding-left: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst Farm: React.FunctionComponent<FarmProps> = ({ image, label, pid }) => {\r\n  const { stakedBalance } = useFarmUser(pid)\r\n  const { t } = useTranslation()\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n\r\n  const handleRenderFarming = (): JSX.Element => {\r\n    if (rawStakedBalance) {\r\n      return (\r\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\r\n          {t('Farming')}\r\n        </Text>\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconImage src={`${process.env.REACT_APP_PUBLIC_BASE}/images/farms/${image}.svg`} alt=\"icon\" width={40} height={40} mr=\"8px\" />\r\n      <div>\r\n        {handleRenderFarming()}\r\n        <Text bold>{label}</Text>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Farm\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Skeleton } from '@heswap/uikit'\r\n\r\nexport interface EarnedProps {\r\n  earnings: number\r\n  pid: number\r\n}\r\n\r\ninterface EarnedPropsWithLoading extends EarnedProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Amount = styled.span<{ earned: number }>`\r\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\r\n  if (userDataReady) {\r\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\r\n  }\r\n  return (\r\n    <Amount earned={0}>\r\n      <Skeleton width={60} />\r\n    </Amount>\r\n  )\r\n}\r\n\r\nexport default Earned\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, useMatchBreakpoints } from '@heswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface DetailsProps {\r\n  actionPanelToggled: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  padding-right: 8px;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-right: 0px;\r\n  }\r\n`\r\n\r\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\r\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\r\n  height: 20px;\r\n`\r\n\r\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\r\n  const { t } = useTranslation()\r\n  const { isXl } = useMatchBreakpoints()\r\n  const isMobile = !isXl\r\n\r\n  return (\r\n    <Container>\r\n      {!isMobile && t('Details')}\r\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Details\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Skeleton, useTooltip } from '@heswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface MultiplierProps {\r\n  multiplier: string\r\n}\r\n\r\nconst MultiplierWrapper = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  width: 36px;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\r\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\r\n  const { t } = useTranslation()\r\n  const tooltipContent = (\r\n    <div>\r\n      {t('The multiplier represents the amount of CAKE rewards each farm gets.')}\r\n      <br />\r\n      <br />\r\n      {t('For example, if a 1x farm was getting 1 CAKE per block, a 40x farm would be getting 40 CAKE per block.')}\r\n    </div>\r\n  )\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\r\n    placement: 'top-end',\r\n    tooltipOffset: [20, 10],\r\n  })\r\n\r\n  return (\r\n    <Container>\r\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Multiplier\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@heswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface LiquidityProps {\r\n  liquidity: BigNumber\r\n}\r\n\r\nconst LiquidityWrapper = styled.div`\r\n  min-width: 110px;\r\n  font-weight: 600;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\r\n  const displayLiquidity =\r\n    liquidity && liquidity.gt(0) ? (\r\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    ) : (\r\n      <Skeleton width={60} />\r\n    )\r\n  const { t } = useTranslation()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('Total value of the funds in this farm’s liquidity pool'),\r\n    { placement: 'top-end', tooltipOffset: [20, 10] },\r\n  )\r\n\r\n  return (\r\n    <Container>\r\n      <LiquidityWrapper>\r\n        <Text>{displayLiquidity}</Text>\r\n      </LiquidityWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Liquidity\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.input};\r\n  border-radius: ${({ theme }) => theme.radii.card};\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 48px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  display: flex;\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\nexport const Earned = styled.div`\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  color: ${({ theme }) => theme.colors.text};\r\n`\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, Skeleton, Text } from '@heswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport Balance from 'components/Balance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nimport { ActionContainer, ActionTitles, ActionContent, Earned } from './styles'\r\n\r\ninterface HarvestActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst StyledButton = styled(Button)`\r\n  border-radius: 8px;\r\n`\r\n\r\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\r\n  const earningsBigNumber = new BigNumber(userData.earnings)\r\n  const cakePrice = usePriceCakeBusd()\r\n  let earnings = BIG_ZERO\r\n  let earningsBusd = 0\r\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\r\n\r\n  // If user didn't connect wallet default balance will be 0\r\n  if (!earningsBigNumber.isZero()) {\r\n    earnings = getBalanceAmount(earningsBigNumber)\r\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\r\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }\r\n\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid)\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          CAKE\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Earned>{displayBalance}</Earned>\r\n          {earningsBusd > 0 && (\r\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\r\n          )}\r\n        </div>\r\n        <StyledButton\r\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onReward()\r\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n\r\n            setPendingTx(false)\r\n          }}\r\n          ml=\"4px\"\r\n        >\r\n          {t('Harvest')}\r\n        </StyledButton>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text } from '@heswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport Balance from 'components/Balance'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useFarmUser, useLpTokenPrice } from 'state/hooks'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport { useAppDispatch } from 'state'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport DepositModal from '../../DepositModal'\r\nimport WithdrawModal from '../../WithdrawModal'\r\nimport { ActionContainer, ActionTitles, ActionContent, Earned } from './styles'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\ninterface StackedActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n  referrer?: string\r\n}\r\n\r\nconst StyledButton = styled(Button)`\r\n  border-radius: 8px;\r\n`\r\n\r\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\r\n  pid,\r\n  lpSymbol,\r\n  lpAddresses,\r\n  quoteToken,\r\n  token,\r\n  userDataReady,\r\n  referrer,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n  const location = useLocation()\r\n  const lpPrice = useLpTokenPrice(lpSymbol)\r\n\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  const handleStake = async (amount: string) => {\r\n    await onStake(amount, referrer)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\r\n  )\r\n  const lpContract = useERC20(lpAddress)\r\n  const dispatch = useAppDispatch()\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <UnlockButton width=\"100%\" />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (isApproved) {\r\n    if (stakedBalance.gt(0)) {\r\n      return (\r\n        <ActionContainer>\r\n          <ActionTitles>\r\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n              {lpSymbol}\r\n            </Text>\r\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n              {t('Staked')}\r\n            </Text>\r\n          </ActionTitles>\r\n          <ActionContent>\r\n            <div>\r\n              <Earned>{displayBalance()}</Earned>\r\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n                <Balance\r\n                  fontSize=\"12px\"\r\n                  color=\"textSubtle\"\r\n                  decimals={2}\r\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\r\n                  unit=\" USD\"\r\n                  prefix=\"~\"\r\n                />\r\n              )}\r\n            </div>\r\n            <IconButtonWrapper>\r\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n                <MinusIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n              <IconButton\r\n                variant=\"secondary\"\r\n                onClick={onPresentDeposit}\r\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n              >\r\n                <AddIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n            </IconButtonWrapper>\r\n          </ActionContent>\r\n        </ActionContainer>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\r\n            {t('Stake').toUpperCase()}\r\n          </Text>\r\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\r\n            {lpSymbol}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <StyledButton\r\n            width=\"100%\"\r\n            onClick={onPresentDeposit}\r\n            variant=\"secondary\"\r\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n          >\r\n            {t('Stake LP')}\r\n          </StyledButton>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (!userDataReady) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Enable Farm')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <StyledButton width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\r\n          {t('Enable')}\r\n        </StyledButton>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n","import React from 'react'\r\nimport styled, { keyframes, css } from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LinkExternal, Text } from '@heswap/uikit'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBscScanAddressUrl } from 'utils/bscscan'\r\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\r\n\r\nimport HarvestAction from './HarvestAction'\r\nimport StakedAction from './StakedAction'\r\nimport Apr, { AprProps } from '../Apr'\r\nimport Multiplier, { MultiplierProps } from '../Multiplier'\r\nimport Liquidity, { LiquidityProps } from '../Liquidity'\r\n\r\nexport interface ActionPanelProps {\r\n  apr: AprProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n  userDataReady: boolean\r\n  expanded: boolean\r\n  referrer: string\r\n}\r\n\r\nconst expandAnimation = keyframes`\r\n  from {\r\n    max-height: 0px;\r\n  }\r\n  to {\r\n    max-height: 500px;\r\n  }\r\n`\r\n\r\nconst collapseAnimation = keyframes`\r\n  from {\r\n    max-height: 500px;\r\n  }\r\n  to {\r\n    max-height: 0px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ expanded }>`\r\n  animation: ${({ expanded }) =>\r\n    expanded\r\n      ? css`\r\n          ${expandAnimation} 300ms linear forwards\r\n        `\r\n      : css`\r\n          ${collapseAnimation} 300ms linear forwards\r\n        `};\r\n  overflow: hidden;\r\n  background: rgb(242, 246, 252);\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: column-reverse;\r\n  padding: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    flex-direction: row;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst StakeContainer = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n  }\r\n`\r\n\r\nconst TagsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 25px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-top: 16px;\r\n  }\r\n\r\n  > div {\r\n    height: 24px;\r\n    padding: 0 6px;\r\n    font-size: 14px;\r\n    margin-right: 4px;\r\n\r\n    svg {\r\n      width: 14px;\r\n    }\r\n  }\r\n`\r\n\r\nconst ActionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n  }\r\n`\r\n\r\nconst InfoContainer = styled.div`\r\n  min-width: 200px;\r\n`\r\n\r\nconst ValueContainer = styled.div`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst ValueWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin: 4px 0px;\r\n`\r\n\r\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\r\n  details,\r\n  apr,\r\n  multiplier,\r\n  liquidity,\r\n  userDataReady,\r\n  expanded,\r\n  referrer,\r\n}) => {\r\n  const farm = details\r\n\r\n  const { t } = useTranslation()\r\n  const isActive = farm.multiplier !== '0X'\r\n  const { quoteToken, token, dual } = farm\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const bsc = getBscScanAddressUrl(lpAddress)\r\n  const info = `https://pancakeswap.info/pair/${lpAddress}`\r\n\r\n  return (\r\n    <Container expanded={expanded}>\r\n      <InfoContainer>\r\n        {isActive && (\r\n          <StakeContainer>\r\n            <StyledLinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\r\n              {t('Get %symbol%', { symbol: lpLabel })}\r\n            </StyledLinkExternal>\r\n          </StakeContainer>\r\n        )}\r\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\r\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\r\n        <TagsContainer>\r\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\r\n          {dual ? <DualTag /> : null}\r\n        </TagsContainer>\r\n      </InfoContainer>\r\n      <ValueContainer>\r\n        <ValueWrapper>\r\n          <Text>{t('APR')}</Text>\r\n          <Apr {...apr} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Multiplier')}</Text>\r\n          <Multiplier {...multiplier} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Liquidity')}</Text>\r\n          <Liquidity {...liquidity} />\r\n        </ValueWrapper>\r\n      </ValueContainer>\r\n      <ActionContainer>\r\n        <HarvestAction {...farm} userDataReady={userDataReady} />\r\n        <StakedAction {...farm} userDataReady={userDataReady} referrer={referrer} />\r\n      </ActionContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ActionPanel\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Label = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  text-align: left;\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n  min-height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\ninterface CellLayoutProps {\r\n  label?: string\r\n}\r\n\r\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\r\n  return (\r\n    <div>\r\n      {label && <Label>{label}</Label>}\r\n      <ContentContainer>{children}</ContentContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CellLayout\r\n","export type TableProps = {\r\n  data?: TableDataTypes[]\r\n  selectedFilters?: string\r\n  sortBy?: string\r\n  sortDir?: string\r\n  onSort?: (value: string) => void\r\n}\r\n\r\nexport type ColumnsDefTypes = {\r\n  id: number\r\n  label: string\r\n  name: string\r\n  sortable: boolean\r\n}\r\n\r\nexport type ScrollBarProps = {\r\n  ref: string\r\n  width: number\r\n}\r\n\r\nexport type TableDataTypes = {\r\n  POOL: string\r\n  APR: string\r\n  EARNED: string\r\n  STAKED: string\r\n  DETAILS: string\r\n  LINKS: string\r\n}\r\n\r\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'liquidity',\r\n    sortable: true,\r\n    label: 'Liquidity',\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'multiplier',\r\n    sortable: true,\r\n    label: 'Multiplier',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useMatchBreakpoints } from '@heswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\r\nimport { useFarmUser } from 'state/hooks'\r\n\r\nimport Apr, { AprProps } from './Apr'\r\nimport Farm, { FarmProps } from './Farm'\r\nimport Earned, { EarnedProps } from './Earned'\r\nimport Details from './Details'\r\nimport Multiplier, { MultiplierProps } from './Multiplier'\r\nimport Liquidity, { LiquidityProps } from './Liquidity'\r\nimport ActionPanel from './Actions/ActionPanel'\r\nimport CellLayout from './CellLayout'\r\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\r\n\r\nexport interface RowProps {\r\n  apr: AprProps\r\n  farm: FarmProps\r\n  earned: EarnedProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n}\r\n\r\ninterface RowPropsWithLoading extends RowProps {\r\n  userDataReady: boolean\r\n  referrer: string\r\n}\r\n\r\nconst cells = {\r\n  apr: Apr,\r\n  farm: Farm,\r\n  earned: Earned,\r\n  details: Details,\r\n  multiplier: Multiplier,\r\n  liquidity: Liquidity,\r\n}\r\n\r\nconst CellInner = styled.div`\r\n  padding: 24px 0px;\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  padding-right: 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    padding-right: 32px;\r\n  }\r\n`\r\n\r\nconst StyledTr = styled.tr`\r\n  cursor: pointer;\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n`\r\n\r\nconst EarnedMobileCell = styled.td`\r\n  padding: 16px 0 24px 16px;\r\n`\r\n\r\nconst AprMobileCell = styled.td`\r\n  padding-top: 16px;\r\n  padding-bottom: 24px;\r\n`\r\n\r\nconst FarmMobileCell = styled.td`\r\n  padding-top: 24px;\r\n`\r\n\r\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\r\n  const { details, userDataReady, referrer } = props\r\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\r\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\r\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\r\n  const { t } = useTranslation()\r\n\r\n  const toggleActionPanel = () => {\r\n    setActionPanelExpanded(!actionPanelExpanded)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setActionPanelExpanded(hasStakedAmount)\r\n  }, [hasStakedAmount])\r\n\r\n  const { isXl, isXs } = useMatchBreakpoints()\r\n\r\n  const isMobile = !isXl\r\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\r\n  const columnNames = tableSchema.map((column) => column.name)\r\n\r\n  const handleRenderRow = () => {\r\n    if (!isXs) {\r\n      return (\r\n        <StyledTr onClick={toggleActionPanel}>\r\n          {Object.keys(props).map((key) => {\r\n            const columnIndex = columnNames.indexOf(key)\r\n            if (columnIndex === -1) {\r\n              return null\r\n            }\r\n\r\n            switch (key) {\r\n              case 'details':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout>\r\n                        <Details actionPanelToggled={actionPanelExpanded} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              case 'apr':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t('APR')}>\r\n                        <Apr {...props.apr} hideButton={isMobile} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              default:\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\r\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n            }\r\n          })}\r\n        </StyledTr>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <StyledTr onClick={toggleActionPanel}>\r\n        <td>\r\n          <tr>\r\n            <FarmMobileCell>\r\n              <CellLayout>\r\n                <Farm {...props.farm} />\r\n              </CellLayout>\r\n            </FarmMobileCell>\r\n          </tr>\r\n          <tr>\r\n            <EarnedMobileCell>\r\n              <CellLayout label={t('Earned')}>\r\n                <Earned {...props.earned} userDataReady={userDataReady} />\r\n              </CellLayout>\r\n            </EarnedMobileCell>\r\n            <AprMobileCell>\r\n              <CellLayout label={t('APR')}>\r\n                <Apr {...props.apr} hideButton />\r\n              </CellLayout>\r\n            </AprMobileCell>\r\n          </tr>\r\n        </td>\r\n        <td>\r\n          <CellInner>\r\n            <CellLayout>\r\n              <Details actionPanelToggled={actionPanelExpanded} />\r\n            </CellLayout>\r\n          </CellInner>\r\n        </td>\r\n      </StyledTr>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {handleRenderRow()}\r\n      {shouldRenderChild && (\r\n        <tr>\r\n          <td colSpan={6}>\r\n            <ActionPanel {...props} expanded={actionPanelExpanded} referrer={referrer} />\r\n          </td>\r\n        </tr>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Row\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@heswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nimport Row, { RowProps } from './Row'\r\n\r\nexport interface ITableProps {\r\n  data: RowProps[]\r\n  columns: ColumnType<RowProps>[]\r\n  userDataReady: boolean\r\n  sortColumn?: string\r\n  referrer: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  filter: ${({ theme }) => theme.card.dropShadow};\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: ${({ theme }) => theme.radii.card};\r\n  margin: 16px 0px;\r\n`\r\n\r\nconst TableWrapper = styled.div`\r\n  overflow: visible;\r\n\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst StyledTable = styled.table`\r\n  border-collapse: collapse;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n`\r\n\r\nconst TableBody = styled.tbody`\r\n  & tr {\r\n    td {\r\n      font-size: 16px;\r\n      vertical-align: middle;\r\n    }\r\n  }\r\n`\r\n\r\nconst TableContainer = styled.div`\r\n  position: relative;\r\n`\r\n\r\nconst ScrollButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n`\r\n\r\nconst FarmTable: React.FC<ITableProps> = (props) => {\r\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\r\n  const { t } = useTranslation()\r\n  const { data, columns, userDataReady, referrer } = props\r\n\r\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\r\n\r\n  const scrollToTop = (): void => {\r\n    tableWrapperEl.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TableContainer>\r\n        <TableWrapper ref={tableWrapperEl}>\r\n          <StyledTable>\r\n            <TableBody>\r\n              {rows.map((row) => {\r\n                return (\r\n                  <Row\r\n                    {...row.original}\r\n                    userDataReady={userDataReady}\r\n                    referrer={referrer}\r\n                    key={`table-row-${row.id}`}\r\n                  />\r\n                )\r\n              })}\r\n            </TableBody>\r\n          </StyledTable>\r\n        </TableWrapper>\r\n        <ScrollButtonContainer>\r\n          <Button variant=\"text\" onClick={scrollToTop}>\r\n            {t('To Top')}\r\n            <ChevronUpIcon color=\"primary\" />\r\n          </Button>\r\n        </ScrollButtonContainer>\r\n      </TableContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default FarmTable\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@heswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useTheme from 'hooks/useTheme'\r\n\r\ninterface FarmTabButtonsProps {\r\n  hasStakeInFinishedFarms: boolean\r\n}\r\n\r\nconst StyledMenu = styled(ButtonMenu)`\r\n  border: none;\r\n  border-radius: 8px;\r\n  background-color: rgb(16, 38, 72);\r\n`\r\n\r\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\r\n  const { url } = useRouteMatch()\r\n  const location = useLocation()\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n\r\n  let activeIndex\r\n  switch (location.pathname) {\r\n    case '/farms':\r\n      activeIndex = 0\r\n      break\r\n    case '/farms/history':\r\n      activeIndex = 1\r\n      break\r\n    case '/farms/archived':\r\n      activeIndex = 2\r\n      break\r\n    default:\r\n      activeIndex = 0\r\n      break\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <StyledMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem\r\n          height=\"48px\"\r\n          paddingX=\"16px\"\r\n          as={Link}\r\n          to={`${url}`}\r\n          variant={activeIndex === 0 ? 'primary' : 'text'}\r\n          style={{\r\n            borderRadius: '8px',\r\n            paddingLeft: '16px',\r\n            paddingRight: '16px',\r\n            backgroundColor: activeIndex === 0 ? theme.colors.primary : 'transparent',\r\n            fontSize: '14px'\r\n          }}\r\n        >\r\n          {t('Live')}\r\n        </ButtonMenuItem>\r\n        <NotificationDot show={hasStakeInFinishedFarms}>\r\n          <ButtonMenuItem\r\n            height=\"48px\"\r\n            paddingX=\"16px\"\r\n            as={Link}\r\n            to={`${url}/history`}\r\n            style={{\r\n              borderRadius: '8px',\r\n              paddingLeft: '16px',\r\n              paddingRight: '16px',\r\n              backgroundColor: activeIndex === 1 ? theme.colors.primary : 'transparent',\r\n              fontSize: '14px'\r\n            }}\r\n          >\r\n            {t('Finished')}\r\n          </ButtonMenuItem>\r\n        </NotificationDot>\r\n      </StyledMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-radius: ${({ theme }) => theme.radii.card};\r\n\r\n  a {\r\n    padding-left: 12px;\r\n    padding-right: 12px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 16px;\r\n  }\r\n`\r\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Image, Heading, RowType, Toggle, Text } from '@heswap/uikit'\r\nimport styled from 'styled-components'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport { useFarms, usePollFarmsData, usePriceCakeBusd } from 'state/hooks'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport { orderBy } from 'lodash'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport { latinise } from 'utils/latinise'\r\nimport { isAddress } from 'utils/addressHelpers'\r\nimport { AddressZero } from '@ethersproject/constants'\r\nimport PageHeader from 'components/PageHeader'\r\nimport SearchInput from 'components/SearchInput'\r\nimport Select, { OptionProps } from 'components/Select'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport ToggleView, { ViewMode } from './components/ToggleView'\r\nimport { DesktopColumnSchema } from './components/types'\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst StyledImage = styled(Image)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 58px;\r\n`\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nconst Title = styled(Heading).attrs({\r\n  as: 'h1',\r\n  scale: 'xl'\r\n})`\r\n  color: ${({ theme }) => theme.colors.backgroundAlt};\r\n  font-weight: 600;\r\n  line-height: 1.4;\r\n`\r\n\r\nconst Description = styled(Heading).attrs({\r\n  as: 'h2',\r\n  scale: 'md',\r\n  color: 'textSubtle'\r\n})`\r\n  font-weight: 300;\r\n  line-height: 1.4;\r\n`\r\n\r\nconst Farms: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  let referrer = AddressZero\r\n  if (pathname.substring(7) && isAddress(pathname.substring(7))) {\r\n    referrer = pathname.substring(7)\r\n    console.log(`referral link, ref=${referrer}`)\r\n  } else {\r\n    console.log('not referral link')\r\n  }\r\n  const { t } = useTranslation()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_farm_view' })\r\n  const { account } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('hot')\r\n\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n\r\n  usePollFarmsData(isArchived)\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\r\n  useEffect(() => {\r\n    setStakedOnly(!isActive)\r\n  }, [isActive])\r\n\r\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\r\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\r\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedInactiveFarms = inactiveFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedArchivedFarms = archivedFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\r\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\r\n          return farm\r\n        }\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\r\n        const apr = isActive ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity) : 0\r\n\r\n        return { ...farm, apr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = latinise(query.toLowerCase())\r\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\r\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, query, isActive],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const loadMoreRef = useRef<HTMLDivElement>(null)\r\n\r\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n\r\n  const farmsStakedMemoized = useMemo(() => {\r\n    let farmsStaked = []\r\n\r\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n      switch (sortOption) {\r\n        case 'apr':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr, 'desc')\r\n        case 'multiplier':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\r\n            'desc',\r\n          )\r\n        case 'earned':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\r\n            'desc',\r\n          )\r\n        case 'liquidity':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n        default:\r\n          return farms\r\n      }\r\n    }\r\n\r\n    if (isActive) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\r\n    }\r\n    if (isInactive) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\r\n    }\r\n    if (isArchived) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\r\n    }\r\n\r\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\r\n  }, [\r\n    sortOption,\r\n    activeFarms,\r\n    farmsList,\r\n    inactiveFarms,\r\n    archivedFarms,\r\n    isActive,\r\n    isInactive,\r\n    isArchived,\r\n    stakedArchivedFarms,\r\n    stakedInactiveFarms,\r\n    stakedOnly,\r\n    stakedOnlyFarms,\r\n    numberOfFarmsVisible,\r\n  ])\r\n\r\n  useEffect(() => {\r\n    const showMoreFarms = (entries) => {\r\n      const [entry] = entries\r\n      if (entry.isIntersecting) {\r\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\r\n      }\r\n    }\r\n\r\n    if (!observerIsSet) {\r\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      loadMoreObserver.observe(loadMoreRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [farmsStakedMemoized, observerIsSet])\r\n\r\n  const rowData = farmsStakedMemoized.map((farm) => {\r\n    const { token, quoteToken } = farm\r\n    const tokenAddress = token.address\r\n    const quoteTokenAddress = quoteToken.address\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 }),\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        tokenAddress,\r\n        quoteTokenAddress,\r\n        cakePrice,\r\n        originalValue: farm.apr,\r\n      },\r\n      farm: {\r\n        image: farm.lpSymbol.split(' ')[0].toLocaleLowerCase(),\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n      },\r\n      earned: {\r\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.liquidity,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    if (viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.label,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} referrer={referrer} />\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard\r\n                key={farm.pid}\r\n                farm={farm}\r\n                cakePrice={cakePrice}\r\n                account={account}\r\n                removed={false}\r\n                referrer={referrer}\r\n              />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/archived`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\r\n            ))}\r\n          </Route>\r\n        </FlexLayout>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <Title mb=\"24px\">\r\n          {t('Farms')}\r\n        </Title>\r\n        <Description>\r\n          {t('Stake Liquidity Pool (LP) tokens to earn.')}\r\n        </Description>\r\n      </PageHeader>\r\n      <Page>\r\n        <ControlContainer>\r\n          <ViewControls>\r\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n            <ToggleWrapper>\r\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\r\n              <Text color=\"textSubtle\"> {t('Staked only')}</Text>\r\n            </ToggleWrapper>\r\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\r\n          </ViewControls>\r\n          <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\r\n              <Select\r\n                options={[\r\n                  {\r\n                    label: t('Hot'),\r\n                    value: 'hot',\r\n                  },\r\n                  {\r\n                    label: t('APR'),\r\n                    value: 'apr',\r\n                  },\r\n                  {\r\n                    label: t('Multiplier'),\r\n                    value: 'multiplier',\r\n                  },\r\n                  {\r\n                    label: t('Earned'),\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: t('Liquidity'),\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\r\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer>\r\n        {renderContent()}\r\n        <div ref={loadMoreRef} />\r\n        <StyledImage src={`${process.env.REACT_APP_PUBLIC_BASE}/images/3dpan.png`} alt=\"Pancake illustration\" width={120} height={103} />\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n"],"sourceRoot":""}