{"version":3,"sources":["views/Home/components/Slider.tsx","hooks/useTokenBalance.ts","hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","hooks/api.ts","views/Home/components/EarnAPRCard.tsx","views/Home/components/EarnAssetCard.tsx","views/Home/components/WinCard.tsx","views/Home/index.tsx"],"names":["StyledSlick","styled","Slick","autoplaySpped","Arrow","props","direction","onClick","style","width","height","position","top","left","right","FetchStatus","Slider","children","settings","dots","infinite","speed","slidesToShow","slidesToScroll","prevArrow","nextArrow","appendDots","customPaging","className","ref","onMount","onUnmount","nodeRef","useRef","useCallback","node","current","useRefWithCallback","setTimeout","slickPlay","slickPause","useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWeb3React","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","useAllEarnings","balances","setBalance","res","fetchAllBalances","CardValue","value","decimals","fontSize","lineHeight","prefix","bold","color","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","CardBusdValue","Block","div","CakeHarvestBalance","t","useTranslation","earningsSum","reduce","accum","earning","earningNumber","eq","DEFAULT_TOKEN_DECIMAL","toNumber","cakePriceBusd","usePriceCakeBusd","earningsBusd","multipliedBy","gt","useTokenBalance","tokenAddress","NOT_FETCHED","SUCCESS","FAILED","BIG_ZERO","fetchStatus","balanceState","setBalanceState","contract","getBep20Contract","methods","balanceOf","call","console","error","prev","fetchBalance","CakeWalletBalance","cakeBalance","getCakeAddress","busdBalance","getBalanceNumber","StyledCard","Card","StyledCardBody","CardBody","process","CardImage","img","Label","theme","colors","backgroundAlt","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","masterChefContract","useMasterChef","balancesWithValue","filter","balanceType","harvestAllFarms","farmWithBalance","harvest","scale","mb","src","alt","id","disabled","length","count","UnlockButton","Row","CakeStats","totalSupply","slowRefresh","setTotalSupply","cakeContract","getCakeContract","supply","fetchTotalSupply","useTotalSupply","burnedBalance","useBurnedBalance","cakeSupply","TotalValueLockedCard","data","setData","fetch","response","json","responseData","fetchData","useGetStats","tvl","toLocaleString","maximumFractionDigits","mediaQueries","lg","CardMidContent","Heading","attrs","EarnAPRCard","isFetchingFarmData","setIsFetchingFarmData","farmsLP","useFarms","cakePrice","dispatch","useAppDispatch","fetchFarmsPublicDataAsync","nonArchivedFarms","nonArchivedFarm","fetchFarmData","highestApr","useMemo","aprs","multiplier","lpTotalInQuoteToken","quoteToken","busdPrice","totalLiquidity","times","getFarmApr","poolWeight","maxApr","max","aprText","split","earnUpTo","InFarms","exact","activeClassName","to","animation","variant","justifyContent","mt","StyledFarmStakingCard","activeNonCakePools","pools","pool","isFinished","earningToken","symbol","includes","latestPools","orderBy","slice","assets","join","EarnAssetCard","earn","InPools","WinCard","Hero","Banner","Cards","BaseLayout","sm","CTACards","Title","as","Description","Home","useTheme","background","gradients","bubblegum","FarmStakingCard","Page"],"mappings":"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","file":"static/js/6.406479e7.chunk.js","sourcesContent":["import React, { CSSProperties, MouseEventHandler, useCallback, useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { IconButton } from '@heswap/uikit'\r\nimport Slick from 'react-slick'\r\nimport { FaArrowLeft, FaArrowRight } from 'react-icons/fa'\r\n\r\nconst StyledSlick = styled(Slick)`\r\n  .slick-slide > div {\r\n    display: flex;\r\n    justify-content: center; /* place control in center of slide */\r\n  }\r\n\r\n  @keyframes loading {\r\n    from {\r\n      width: 0%;\r\n    }\r\n    to {\r\n      width: 100%;\r\n    }\r\n  }\r\n\r\n  .slick-dots > li {\r\n    position: unset;\r\n    width: unset;\r\n    height: unset;\r\n  }\r\n\r\n  .ft-slick__dots--custom {\r\n    width: 48px;\r\n    height: 8px;\r\n    background-color: #e5e7e9;\r\n    border: none;\r\n    border-radius: 4px;\r\n  }\r\n\r\n  .slick-dots .slick-active .ft-slick__dots--custom {\r\n    overflow: hidden;\r\n    position: relative;\r\n\r\n    .loading {\r\n      height: 8px;\r\n      animation: loading ${({ autoplaySpped }) => autoplaySpped / 1000}s ease-in;\r\n      background-image: linear-gradient(270deg, #4fd15a, #03ac0e);\r\n      display: inline-block;\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n    }\r\n  }\r\n`\r\n\r\nexport interface ArrowProps {\r\n  direction: string\r\n  onClick?: MouseEventHandler<HTMLButtonElement>\r\n}\r\n\r\nconst Arrow = (props: ArrowProps) => {\r\n  const { direction, onClick } = props;\r\n  const style: CSSProperties = {\r\n    width: '32px',\r\n    height: '32px',\r\n    position: 'absolute',\r\n    top: 'calc(50% - 16px)'\r\n  }\r\n  if (direction === 'prev') {\r\n    style.left = '-32px'\r\n  }\r\n  if (direction === 'next') {\r\n    style.right = '-32px'\r\n  }\r\n  return (\r\n    <IconButton onClick={onClick} style={style}>\r\n      {direction === 'prev' && (\r\n        <FaArrowLeft />\r\n      )}\r\n      {direction === 'next' && (\r\n        <FaArrowRight />\r\n      )}\r\n    </IconButton>\r\n  );\r\n}\r\n\r\nfunction useRefWithCallback(onMount, onUnmount) {\r\n  const nodeRef = useRef(null);\r\n\r\n  const setRef = useCallback(node => {\r\n    if (nodeRef.current) {\r\n      onUnmount(nodeRef.current);\r\n    }\r\n\r\n    nodeRef.current = node;\r\n\r\n    if (nodeRef.current) {\r\n      onMount(nodeRef.current);\r\n    }\r\n  }, [onMount, onUnmount]);\r\n\r\n  return setRef;\r\n}\r\n\r\nconst Slider = ({ children }) => {\r\n  const settings = {\r\n    dots: true,\r\n    autoplaySpped: 3000,\r\n    infinite: true,\r\n    speed: 500,\r\n    slidesToShow: 1,\r\n    slidesToScroll: 1,\r\n    prevArrow: <Arrow direction=\"prev\" />,\r\n    nextArrow: <Arrow direction=\"next\" />,\r\n    appendDots: dots => <ul>{dots}</ul>,\r\n    customPaging: () => (\r\n      <div className=\"ft-slick__dots--custom\">\r\n        <div className=\"loading\" />\r\n      </div>\r\n    )\r\n  }\r\n  // if autoplay is true and user navigates to other page, an error occurs in setState\r\n  // when user navigates to other page, autoplay should be stopped\r\n  // so we will use method, not props to play on mount and pause on unmount\r\n  const ref = useRefWithCallback(\r\n    node => {\r\n      // componentDidMount\r\n      // do delayed call to avoid deadlock\r\n      setTimeout(() => {\r\n        node.slickPlay()\r\n      }, 100)\r\n    },\r\n    node => {\r\n      // componentWillUnmount\r\n      node.slickPause()\r\n    }\r\n  )\r\n\r\n  return (\r\n    <StyledSlick {...settings} ref={ref}>\r\n      {[...children]}\r\n    </StyledSlick>\r\n  )\r\n}\r\n\r\nexport default Slider;\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport useWeb3 from './useWeb3'\r\nimport useRefresh from './useRefresh'\r\nimport useLastUpdated from './useLastUpdated'\r\n\r\ntype UseTokenBalanceState = {\r\n  balance: BigNumber\r\n  fetchStatus: FetchStatus\r\n}\r\n\r\nexport enum FetchStatus {\r\n  NOT_FETCHED = 'not-fetched',\r\n  SUCCESS = 'success',\r\n  FAILED = 'failed',\r\n}\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\r\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\r\n    balance: BIG_ZERO,\r\n    fetchStatus: NOT_FETCHED,\r\n  })\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress)\r\n      try {\r\n        const res = await contract.methods.balanceOf(account).call()\r\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\r\n      } catch (e) {\r\n        console.error(e)\r\n        setBalanceState((prev) => ({\r\n          ...prev,\r\n          fetchStatus: FAILED,\r\n        }))\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED])\r\n\r\n  return balanceState\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getCakeContract()\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress)\r\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useGetBnbBalance = () => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { account } = useWeb3React()\r\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\r\n  const web3 = useWeb3()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const walletBalance = await web3.eth.getBalance(account)\r\n      setBalance(new BigNumber(walletBalance))\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, web3, lastUpdated, setBalance])\r\n\r\n  return { balance, refresh: setLastUpdated }\r\n}\r\n\r\nexport default useTokenBalance\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport useRefresh from './useRefresh'\r\n\r\nexport interface FarmWithBalance extends FarmConfig {\r\n  balance: BigNumber\r\n}\r\n\r\nconst useFarmsWithBalance = () => {\r\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingHSW',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const rawResults = await multicall(masterChefABI, calls)\r\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\r\n\r\n      setFarmsWithBalances(results)\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return farmsWithBalances\r\n}\r\n\r\nexport default useFarmsWithBalance\r\n","import { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useAllEarnings = () => {\r\n  const [balances, setBalance] = useState([])\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchAllBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingHSW',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const res = await multicall(masterChefABI, calls)\r\n\r\n      setBalance(res)\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return balances\r\n}\r\n\r\nexport default useAllEarnings\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@heswap/uikit'\r\n\r\nexport interface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  lineHeight?: string\r\n  prefix?: string\r\n  bold?: boolean\r\n  color?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({\r\n  value,\r\n  decimals,\r\n  fontSize = '40px',\r\n  lineHeight = '1',\r\n  prefix = '',\r\n  bold = true,\r\n  color = 'text',\r\n}) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\r\n      {prefix}\r\n      {countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport CardValue, { CardValueProps } from './CardValue'\r\n\r\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\r\n  return (\r\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\r\n  )\r\n}\r\n\r\nexport default CardBusdValue\r\n","import React from 'react'\r\nimport { Text } from '@heswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useAllEarnings from 'hooks/useAllEarnings'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport styled from 'styled-components'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst CakeHarvestBalance = () => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const allEarnings = useAllEarnings()\r\n  const earningsSum = allEarnings.reduce((accum, earning) => {\r\n    const earningNumber = new BigNumber(earning)\r\n    if (earningNumber.eq(0)) {\r\n      return accum\r\n    }\r\n    return accum + earningNumber.div(DEFAULT_TOKEN_DECIMAL).toNumber()\r\n  }, 0)\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(cakePriceBusd).toNumber()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\r\n        {t('Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Block>\r\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\r\n      {cakePriceBusd.gt(0) && <CardBusdValue value={earningsBusd} />}\r\n    </Block>\r\n  )\r\n}\r\n\r\nexport default CakeHarvestBalance\r\n","import React from 'react'\r\nimport { Text } from '@heswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst CakeWalletBalance = () => {\r\n  const { t } = useTranslation()\r\n  const { balance: cakeBalance } = useTokenBalance(getCakeAddress())\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(cakePriceBusd).toNumber()\r\n  const { account } = useWeb3React()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '54px' }}>\r\n        {t('Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\r\n      {cakePriceBusd.gt(0) ? <CardBusdValue value={busdBalance} /> : <br />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@heswap/uikit'\r\nimport { harvest } from 'utils/callHelpers'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport { useMasterChef } from 'hooks/useContract'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\n\r\nconst StyledCard = styled(Card)`\r\n  display: inline-block;\r\n  background: linear-gradient(135deg, #031640, #2e52bf);\r\n  min-height: 376px;\r\n`\r\n\r\nconst StyledCardBody = styled(CardBody)`\r\n  background-image: url('${process.env.PUBLIC_URL}/images/cake-bg.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.backgroundAlt};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const masterChefContract = useMasterChef()\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    for (const farmWithBalance of balancesWithValue) {\r\n      try {\r\n        // eslint-disable-next-line no-await-in-loop\r\n        await harvest(masterChefContract, farmWithBalance.pid, account)\r\n      } catch (error) {\r\n        // TODO: find a way to handle when the user rejects transaction or it fails\r\n      }\r\n    }\r\n    setPendingTx(false)\r\n  }, [account, balancesWithValue, masterChefContract])\r\n\r\n  return (\r\n    <StyledCard>\r\n      <StyledCardBody>\r\n        <Heading scale=\"xl\" mb=\"24px\" color=\"backgroundAlt\">\r\n          {t('Farms & Staking')}\r\n        </Heading>\r\n        <CardImage src={`${process.env.PUBLIC_URL}/images/cake.svg`} alt=\"cake logo\" width={64} height={64} />\r\n        <Block>\r\n          <Label>{t('CAKE to Harvest')}:</Label>\r\n          <CakeHarvestBalance />\r\n        </Block>\r\n        <Block>\r\n          <Label>{t('CAKE in Wallet')}:</Label>\r\n          <CakeWalletBalance />\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              width=\"100%\"\r\n            >\r\n              {pendingTx\r\n                ? t('Collecting CAKE')\r\n                : t('Harvest all (%count%)', { count: balancesWithValue.length })\r\n              }\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton width=\"100%\" />\r\n          )}\r\n        </Actions>\r\n      </StyledCardBody>\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@heswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const { t } = useTranslation()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = getBalanceNumber(useBurnedBalance(getCakeAddress()))\r\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - burnedBalance : 0\r\n\r\n  return (\r\n    <StyledCard>\r\n      <CardBody>\r\n        <Heading scale=\"xl\" mb=\"24px\" color=\"secondary\">\r\n          {t('Cake Stats')}\r\n        </Heading>\r\n        <Row>\r\n          <Text color=\"primary\">{t('Total CAKE Supply')}</Text>\r\n          {cakeSupply && <CardValue color=\"primary\" fontSize=\"18px\" value={cakeSupply} />}\r\n        </Row>\r\n        <Row>\r\n          <Text color=\"primary\">{t('Total CAKE Burned')}</Text>\r\n          <CardValue color=\"primary\" fontSize=\"18px\" decimals={0} value={burnedBalance} />\r\n        </Row>\r\n        <Row>\r\n          <Text color=\"primary\">{t('New CAKE/block')}</Text>\r\n          <CardValue color=\"primary\" fontSize=\"18px\" decimals={0} value={20} />\r\n        </Row>\r\n      </CardBody>\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from '@heswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useGetStats } from 'hooks/api'\r\n\r\nconst StyledCard = styled(Card)`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n`\r\n\r\nconst TotalValueLockedCard = () => {\r\n  const { t } = useTranslation()\r\n  const data = useGetStats()\r\n  const tvl = data ? data.tvl.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\r\n\r\n  return (\r\n    <StyledCard>\r\n      <CardBody>\r\n        <Heading scale=\"lg\" mb=\"24px\" color=\"primary\">\r\n          {t('Total Value Locked (TVL)')}\r\n        </Heading>\r\n        {data ? (\r\n          <>\r\n            <Heading scale=\"xl\">{`$${tvl}`}</Heading>\r\n            <Text color=\"textSubtle\">{t('Across all LPs and Syrup Pools')}</Text>\r\n          </>\r\n        ) : (\r\n          <Skeleton height={66} />\r\n        )}\r\n      </CardBody>\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","import { useEffect, useState } from 'react'\r\n\r\n/* eslint-disable camelcase */\r\nexport interface DeBankTvlResponse {\r\n  id: string\r\n  chain: string\r\n  name: string\r\n  site_url: string\r\n  logo_url: string\r\n  has_supported_portfolio: boolean\r\n  tvl: number\r\n}\r\n\r\nexport const useGetStats = () => {\r\n  const [data, setData] = useState<DeBankTvlResponse | null>(null)\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch('https://openapi.debank.com/v1/protocol?id=bsc_heswap')\r\n        const responseData: DeBankTvlResponse = await response.json()\r\n\r\n        setData(responseData)\r\n      } catch (error) {\r\n        console.error('Unable to fetch data:', error)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [setData])\r\n\r\n  return data\r\n}\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@heswap/uikit'\r\nimport max from 'lodash/max'\r\nimport { NavLink } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { useFarms, usePriceCakeBusd } from 'state/hooks'\r\nimport { fetchFarmsPublicDataAsync, nonArchivedFarms } from 'state/farms'\r\nimport { getFarmApr } from 'utils/apr'\r\n\r\nconst StyledCard = styled(Card)`\r\n  background: linear-gradient(235deg, rgb(51, 111, 245) 4.05%, rgba(17, 81, 225, 0.32) 103.52%);\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n  transition: opacity 200ms;\r\n  &:hover {\r\n    opacity: 0.65;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\r\n  line-height: 44px;\r\n`\r\nconst EarnAPRCard = () => {\r\n  const [isFetchingFarmData, setIsFetchingFarmData] = useState(true)\r\n  const { t } = useTranslation()\r\n  const { data: farmsLP } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const dispatch = useAppDispatch()\r\n\r\n  // Fetch farm data once to get the max APR\r\n  useEffect(() => {\r\n    const fetchFarmData = async () => {\r\n      try {\r\n        await dispatch(fetchFarmsPublicDataAsync(nonArchivedFarms.map((nonArchivedFarm) => nonArchivedFarm.pid)))\r\n      } finally {\r\n        setIsFetchingFarmData(false)\r\n      }\r\n    }\r\n\r\n    fetchFarmData()\r\n  }, [dispatch, setIsFetchingFarmData])\r\n\r\n  const highestApr = useMemo(() => {\r\n    if (cakePrice.gt(0)) {\r\n      const aprs = farmsLP.map((farm) => {\r\n        // Filter inactive farms, because their theoretical APR is super high. In practice, it's 0.\r\n        if (farm.pid !== 0 && farm.multiplier !== '0X' && farm.lpTotalInQuoteToken && farm.quoteToken.busdPrice) {\r\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\r\n          return getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity)\r\n        }\r\n        return null\r\n      })\r\n\r\n      const maxApr = max(aprs)\r\n      return maxApr?.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n    }\r\n    return null\r\n  }, [cakePrice, farmsLP])\r\n\r\n  const aprText = highestApr || '-'\r\n  const earnAprText = t('Earn up to %highestApr% APR in Farms', { highestApr: aprText })\r\n  const [earnUpTo, InFarms] = earnAprText.split(aprText)\r\n\r\n  return (\r\n    <StyledCard>\r\n      <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apr-cta\">\r\n        <CardBody>\r\n          <Heading color=\"backgroundAlt\" scale=\"lg\">\r\n            {earnUpTo}\r\n          </Heading>\r\n          <CardMidContent color=\"#7645d9\">\r\n            {highestApr && !isFetchingFarmData ? (\r\n              `${highestApr}%`\r\n            ) : (\r\n              <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\r\n            )}\r\n          </CardMidContent>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Heading color=\"backgroundAlt\" scale=\"lg\">\r\n              {InFarms}\r\n            </Heading>\r\n            <ArrowForwardIcon mt={30} color=\"primary\" />\r\n          </Flex>\r\n        </CardBody>\r\n      </NavLink>\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default EarnAPRCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport orderBy from 'lodash/orderBy'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@heswap/uikit'\r\nimport { NavLink } from 'react-router-dom'\r\nimport pools from 'config/constants/pools'\r\nimport { Pool } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background: linear-gradient(235deg, rgb(51, 111, 245) 4.05%, rgba(17, 81, 225, 0.32) 103.52%);\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n  transition: opacity 200ms;\r\n  &:hover {\r\n    opacity: 0.65;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\r\n  line-height: 44px;\r\n`\r\n\r\nconst activeNonCakePools = pools.filter((pool) => !pool.isFinished && !pool.earningToken.symbol.includes('CAKE'))\r\nconst latestPools: Pool[] = orderBy(activeNonCakePools, ['sortOrder', 'pid'], ['desc', 'desc']).slice(0, 3)\r\n// Always include CAKE\r\nconst assets = ['CAKE', ...latestPools.map((pool) => pool.earningToken.symbol)].join(', ')\r\n\r\nconst EarnAssetCard = () => {\r\n  const { t } = useTranslation()\r\n  const assetText = t('Earn %assets% in Pools', { assets })\r\n  const [earn, InPools] = assetText.split(assets)\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <NavLink exact activeClassName=\"active\" to=\"/syrup\" id=\"pool-cta\">\r\n        <CardBody>\r\n          <Heading color=\"backgroundAlt\" scale=\"lg\">\r\n            {earn}\r\n          </Heading>\r\n          <CardMidContent color=\"rgb(255, 219, 28)\">{assets}</CardMidContent>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Heading color=\"backgroundAlt\" scale=\"lg\">\r\n              {InPools}\r\n            </Heading>\r\n            <ArrowForwardIcon mt={30} color=\"primary\" />\r\n          </Flex>\r\n        </CardBody>\r\n      </NavLink>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default EarnAssetCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@heswap/uikit'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background: linear-gradient(235deg, rgb(51, 111, 245) 4.05%, rgba(17, 81, 225, 0.32) 103.52%);\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n  transition: opacity 200ms;\r\n  &:hover {\r\n    opacity: 0.65;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\r\n  line-height: 44px;\r\n`\r\nconst WinCard = () => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <NavLink exact activeClassName=\"active\" to=\"/lottery\" id=\"lottery-pot-cta\">\r\n        <CardBody>\r\n          <Heading color=\"backgroundAlt\" scale=\"lg\">\r\n            {t('Lottery')}\r\n          </Heading>\r\n          <CardMidContent color=\"rgb(255, 219, 28)\">{t('Coming Soon')}</CardMidContent>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Heading color=\"backgroundAlt\" scale=\"lg\" />\r\n            <ArrowForwardIcon mt={30} color=\"success\" />\r\n          </Flex>\r\n        </CardBody>\r\n      </NavLink>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default WinCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { BaseLayout, Heading } from '@heswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Page from 'components/layout/Page'\r\nimport Slider from 'views/Home/components/Slider'\r\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\r\nimport CakeStats from 'views/Home/components/CakeStats'\r\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\r\nimport EarnAPRCard from 'views/Home/components/EarnAPRCard'\r\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\r\nimport WinCard from 'views/Home/components/WinCard'\r\nimport useTheme from 'hooks/useTheme'\r\n\r\nconst Hero = styled.div`\r\n  padding: 96px 32px 48px 32px;\r\n  margin: 0 auto;\r\n  max-width: 1200px;\r\n  border: none;\r\n`\r\n\r\nconst Banner = styled.div`\r\n  align-items: center;\r\n  // background-image: url('${process.env.PUBLIC_URL}/images/pan-bg-mobile.svg');\r\n  // background-repeat: no-repeat;\r\n  // background-position: top center;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  margin-bottom: 32px;\r\n  padding-top: 116px;\r\n  text-align: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    // background-image: url('${process.env.PUBLIC_URL}/images/pan-bg2.svg'), url('${process.env.PUBLIC_URL}/images/pan-bg.svg');\r\n    // background-position: left center, right center;\r\n    height: 165px;\r\n    padding-top: 0;\r\n  }\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  padding-bottom: 24px;\r\n  grid-gap: 24px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    padding-bottom: 32px;\r\n    grid-gap: 32px;\r\n\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst CTACards = styled(BaseLayout)`\r\n  align-items: start;\r\n  margin-bottom: 24px;\r\n  grid-gap: 24px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin-bottom: 32px;\r\n    grid-gap: 32px;\r\n\r\n    & > div {\r\n      grid-column: span 4;\r\n    }\r\n  }\r\n`\r\n\r\nconst Title = styled(Heading).attrs({\r\n  as: 'h1',\r\n  scale: 'xl'\r\n})`\r\n  color: ${({ theme }) => theme.colors.backgroundAlt};\r\n  font-weight: 600;\r\n  line-height: 1.4;\r\n`\r\n\r\nconst Description = styled(Heading).attrs({\r\n  as: 'h2',\r\n  scale: 'md',\r\n  color: 'textSubtle'\r\n})`\r\n  font-weight: 300;\r\n  line-height: 1.4;\r\n`\r\n\r\nconst Home: React.FC = () => {\r\n  const { theme } = useTheme()\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <>\r\n      <div style={{ background: theme.colors.gradients.bubblegum }}>\r\n        <Hero>\r\n          <Banner>\r\n            <Title mb=\"8px\">\r\n              {t('HeSwap')}\r\n            </Title>\r\n            <Description>\r\n              {t('The best of its kind on chain. Invite friends through refer system')}\r\n            </Description>\r\n          </Banner>\r\n          <Slider>\r\n            <FarmStakingCard />\r\n            <FarmStakingCard />\r\n          </Slider>\r\n        </Hero>\r\n      </div>\r\n      <Page>\r\n        <CTACards>\r\n          <EarnAPRCard />\r\n          <EarnAssetCard />\r\n          <WinCard />\r\n        </CTACards>\r\n        <Cards>\r\n          <CakeStats />\r\n          <TotalValueLockedCard />\r\n        </Cards>\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Home\r\n"],"sourceRoot":""}