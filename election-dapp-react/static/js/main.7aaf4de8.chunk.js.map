{"version":3,"sources":["truffle-networks.js","App.js","serviceWorker.js","index.js"],"names":["HDWalletProvider","require","MNEMONIC","process","ROPSTEN_URL","KOVAN_URL","RINKEBY_URL","MAINNET_URL","module","exports","development","host","port","network_id","ropsten","provider","kovan","rinkeby","mainnet","Title","Typography","columns","title","dataIndex","key","App","state","account","hasVoted","candidates","activeId","loading","hasError","errorMessage","errorDescription","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","Web3","enable","then","data","error","console","log","getProvider","onChangeCandidate","e","setState","target","value","onCastVote","gasPrice","utils","toWei","contract","methods","vote","send","gas","from","on","hash","receipt","confirmationNumber","result","catch","render","className","direction","size","style","width","type","message","description","closable","onClose","level","dataSource","rowKey","Group","onChange","map","candidate","index","id","name","onClick","disabled","a","this","eth","getAccounts","accounts","targetNetId","networks","net","getId","networkId","getNetworkType","networkType","deployedNetwork","Election","Contract","abi","address","watchEvents","candidatesCount","call","parseInt","i","push","voteCount","voters","alert","events","votedEvent","fromBlock","toBlock","event","cloneDeep","length","returnValues","_candidateId","PureComponent","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7aaf4de8.chunk.js","sourcesContent":["const HDWalletProvider = require('@truffle/hdwallet-provider');\r\nconst MNEMONIC = process.env.REACT_APP_MNEMONIC;\r\nconst ROPSTEN_URL = `https://ropsten.infura.io/v3/${process.env.REACT_APP_INFURA_PROJECT_ID}`;\r\nconst KOVAN_URL = `https://kovan.infura.io/v3/${process.env.REACT_APP_INFURA_PROJECT_ID}`;\r\nconst RINKEBY_URL = `https://rinkeby.infura.io/v3/${process.env.REACT_APP_INFURA_PROJECT_ID}`;\r\nconst MAINNET_URL = `https://mainnet.infura.io/v3/${process.env.REACT_APP_INFURA_PROJECT_ID}`;\r\n\r\nmodule.exports = {\r\n  development: {\r\n    host: \"127.0.0.1\",\r\n    port: 7545,\r\n    network_id: \"*\" // Match any network id\r\n  },\r\n  ropsten: {\r\n    provider: () => new HDWalletProvider(MNEMONIC, ROPSTEN_URL),\r\n    network_id: 3\r\n  },\r\n  kovan: {\r\n    provider: () => new HDWalletProvider(MNEMONIC, KOVAN_URL),\r\n    network_id: 42\r\n  },\r\n  rinkeby: {\r\n    provider: () => new HDWalletProvider(MNEMONIC, RINKEBY_URL),\r\n    network_id: 4\r\n  },\r\n  mainnet: {\r\n    provider: () => new HDWalletProvider(MNEMONIC, MAINNET_URL),\r\n    network_id: 1\r\n  }\r\n};","import React, { PureComponent } from 'react';\r\nimport { Alert, Button, Radio, Space, Spin, Table, Typography } from 'antd';\r\nimport { cloneDeep } from 'lodash/fp';\r\nimport 'antd/dist/antd.css';\r\nimport './App.css';\r\n\r\nimport Web3 from 'web3';\r\nimport Election from './contracts/Election.json';\r\nimport networks from './truffle-networks';\r\n\r\nconst { Title } = Typography;\r\n\r\nconst columns = [{\r\n  title: '#',\r\n  dataIndex: 'id',\r\n  key: 'id'\r\n},{\r\n  title: 'Name',\r\n  dataIndex: 'name',\r\n  key: 'name'\r\n},{\r\n  title: 'Votes',\r\n  dataIndex: 'voteCount',\r\n  key: 'voteCount'\r\n}];\r\n\r\nclass App extends PureComponent {\r\n  state = {\r\n    account: '0x0',\r\n    hasVoted: false,\r\n    candidates: [],\r\n    activeId: 0,\r\n    loading: false,\r\n    hasError: false,\r\n    errorMessage: '',\r\n    errorDescription: ''\r\n  }\r\n\r\n  async componentDidMount() {\r\n    this.setState({ loading: true });\r\n    try {\r\n      // Get network provider and web3 instance.\r\n      const web3 = await this.getWeb3();\r\n      this.web3 = web3;\r\n\r\n      // Use web3 to get the user's accounts.\r\n      const accounts = await web3.eth.getAccounts();\r\n\r\n      // Get the contract instance.\r\n      const targetNetId = networks[process.env.REACT_APP_NETWORK_NAME].network_id;\r\n      const networkId = await web3.eth.net.getId();\r\n      if (targetNetId !== '*' && networkId !== targetNetId) {\r\n        const networkType = await web3.eth.net.getNetworkType();\r\n        this.setState({\r\n          loading: false,\r\n          hasError: true,\r\n          errorMessage: 'Error in Ethereum Network Type',\r\n          errorDescription: `Current account is of ${networkType} network. Please select account for ${process.env.REACT_APP_NETWORK_NAME} network.`\r\n        });\r\n        return;\r\n      }\r\n      const deployedNetwork = Election.networks[networkId];\r\n      this.contract = new web3.eth.Contract(Election.abi, deployedNetwork && deployedNetwork.address);\r\n\r\n      // Install event watch\r\n      this.watchEvents();\r\n\r\n      // Get candidate list\r\n      let candidatesCount = await this.contract.methods.candidatesCount().call();\r\n      candidatesCount = parseInt(candidatesCount, 10);\r\n      const candidates = [];\r\n      for (let i = 1; i <= candidatesCount; i++) {\r\n        const candidate = await this.contract.methods.candidates(i).call();\r\n        candidates.push({\r\n          id: candidate.id,\r\n          name: candidate.name,\r\n          voteCount: parseInt(candidate.voteCount, 10)\r\n        });\r\n      }\r\n\r\n      // Check whether you already have voted\r\n      const hasVoted = await this.contract.methods.voters(accounts[0]).call();\r\n\r\n      // Set web3, accounts, and contract to the state, and then proceed with an\r\n      // example of interacting with the contract's methods.\r\n      this.setState({\r\n        loading: false,\r\n        account: accounts[0],\r\n        candidates,\r\n        hasVoted\r\n      });\r\n    } catch (error) {\r\n      this.setState({ loading: false }, () => {\r\n        // Catch any errors for any of the above operations.\r\n        alert(\r\n          `Failed to load web3, accounts, or contract. Check console for details.`,\r\n        );\r\n        console.error(error);\r\n      });\r\n    }\r\n  }\r\n\r\n  getWeb3 = () => new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener('load', () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          window.ethereum.enable().then(data => {\r\n            // Acccounts now exposed\r\n            resolve(web3);\r\n          });\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const web3 = new Web3(this.getProvider());\r\n        console.log('No web3 instance injected, using Local web3.');\r\n        resolve(web3);\r\n      }\r\n    });\r\n  })\r\n\r\n  getProvider() {\r\n    if (process.env.REACT_APP_NETWORK_NAME === 'development') {\r\n      return new Web3.providers.HttpProvider(`http://${networks.development.host}:${networks.development.port}`);\r\n    }\r\n    return networks[process.env.REACT_APP_NETWORK_NAME].provider();\r\n  }\r\n\r\n  watchEvents() {\r\n    this.contract.events.votedEvent({\r\n      fromBlock: 0,\r\n      toBlock: 'latest'\r\n    }, (error, event) => {\r\n      console.log('votedEvent', event);\r\n      if (!error) {\r\n        const candidates = cloneDeep(this.state.candidates);\r\n        for (let i = 0; i < candidates.length; i++) {\r\n          if (candidates[i].id === event.returnValues._candidateId) {\r\n            candidates[i].voteCount++;\r\n            break;\r\n          }\r\n        }\r\n        this.setState({ candidates });\r\n      }\r\n    }).on('data', event => {\r\n      console.log('votedEvent data', event);\r\n    }).on('error', console.error);\r\n  }\r\n\r\n  onChangeCandidate = (e) => {\r\n    this.setState({ activeId: e.target.value });\r\n  }\r\n\r\n  onCastVote = () => {\r\n    this.setState({ loading: true });\r\n    // if gas and gasPrice is insufficient, \"vote\" method may be failed\r\n    // 20 gwei and 210000 are experienced values, not formally calculated values.\r\n    const gasPrice = this.web3.utils.toWei('20', 'gwei');\r\n    this.contract.methods.vote(this.state.activeId).send({\r\n      gas: 210000,\r\n      gasPrice,\r\n      from: this.state.account\r\n    }).on('transactionHash', (hash) => {\r\n      console.log('Hash');\r\n    }).on('receipt', (receipt) => {\r\n      console.log('Receipt');\r\n    }).on('confirmation', (confirmationNumber, receipt) => {\r\n      console.log('Confirmed');\r\n    }).on('error', console.error).then(result => {\r\n      this.setState({\r\n        loading: false,\r\n        hasVoted: true\r\n      });\r\n    }).catch(error => {\r\n      this.setState({ loading: false });\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n  render = () => (\r\n    <div className=\"App\">\r\n      <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\r\n        {this.state.hasError && (\r\n          <Alert\r\n            type=\"warning\"\r\n            message={this.state.errorMessage}\r\n            description={this.state.errorDescription}\r\n            closable\r\n            onClose={() => this.setState({ hasError: false })}\r\n          />\r\n        )}\r\n        <Title level={3}>Election Results</Title>\r\n        <Title level={5}>Your Account: {this.state.account}</Title>\r\n        <Table columns={columns} dataSource={this.state.candidates} rowKey=\"id\" />\r\n        {this.state.hasVoted ? (\r\n          <Title level={5}>Already you have voted</Title>\r\n        ) : (\r\n          <Space size=\"large\">\r\n            <Radio.Group value={this.state.activeId} onChange={this.onChangeCandidate}>\r\n              {this.state.candidates.map((candidate, index) => (\r\n                <Radio\r\n                  key={index}\r\n                  value={candidate.id}\r\n                >{candidate.name}</Radio>\r\n              ))}\r\n            </Radio.Group>\r\n            <Button\r\n              type=\"primary\"\r\n              size=\"large\"\r\n              onClick={this.onCastVote}\r\n              disabled={this.state.activeId === 0}\r\n            >Vote</Button>\r\n          </Space>\r\n        )}\r\n      </Space>\r\n      {this.state.loading && (\r\n        <div className=\"spin-container\">\r\n          <Spin />\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}