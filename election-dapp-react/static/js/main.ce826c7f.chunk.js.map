{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Title","Typography","columns","title","dataIndex","key","App","state","account","hasVoted","candidates","activeId","loading","componentDidMount","a","setState","getWeb3","web3","eth","getAccounts","accounts","net","getId","networkId","deployedNetwork","Election","networks","contract","Contract","abi","address","watchEvents","methods","candidatesCount","call","parseInt","i","candidate","push","id","name","voteCount","voters","alert","console","error","Promise","resolve","reject","window","addEventListener","ethereum","Web3","enable","then","data","log","provider","providers","HttpProvider","onChangeCandidate","e","target","value","onCastVote","gasPrice","utils","toWei","vote","send","gas","from","on","hash","receipt","confirmationNumber","result","catch","render","className","direction","size","style","width","level","dataSource","rowKey","Group","onChange","map","index","type","onClick","disabled","position","top","left","height","backgroundColor","display","justifyContent","alignItems","this","events","votedEvent","fromBlock","toBlock","event","cloneDeep","length","returnValues","_candidateId","PureComponent","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ce826c7f.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport { Button, Radio, Space, Spin, Table, Typography } from 'antd';\r\nimport { cloneDeep } from 'lodash/fp';\r\nimport 'antd/dist/antd.css';\r\nimport './App.css';\r\n\r\nimport Web3 from 'web3';\r\nimport Election from './contracts/Election.json';\r\n\r\nconst { Title } = Typography;\r\n\r\nconst columns = [{\r\n  title: '#',\r\n  dataIndex: 'id',\r\n  key: 'id'\r\n},{\r\n  title: 'Name',\r\n  dataIndex: 'name',\r\n  key: 'name'\r\n},{\r\n  title: 'Votes',\r\n  dataIndex: 'voteCount',\r\n  key: 'voteCount'\r\n}];\r\n\r\nclass App extends PureComponent {\r\n  state = {\r\n    account: '0x0',\r\n    hasVoted: false,\r\n    candidates: [],\r\n    activeId: 0,\r\n    loading: false\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    this.setState({ loading: true });\r\n    try {\r\n      // Get network provider and web3 instance.\r\n      const web3 = await this.getWeb3();\r\n      this.web3 = web3;\r\n\r\n      // Use web3 to get the user's accounts.\r\n      const accounts = await web3.eth.getAccounts();\r\n\r\n      // Get the contract instance.\r\n      const networkId = await web3.eth.net.getId();\r\n      const deployedNetwork = Election.networks[networkId];\r\n      this.contract = new web3.eth.Contract(Election.abi, deployedNetwork && deployedNetwork.address);\r\n\r\n      // Install event watch\r\n      this.watchEvents();\r\n\r\n      // Get candidate list\r\n      let candidatesCount = await this.contract.methods.candidatesCount().call();\r\n      candidatesCount = parseInt(candidatesCount, 10);\r\n      const candidates = [];\r\n      for (let i = 1; i <= candidatesCount; i++) {\r\n        const candidate = await this.contract.methods.candidates(i).call();\r\n        candidates.push({\r\n          id: candidate.id,\r\n          name: candidate.name,\r\n          voteCount: parseInt(candidate.voteCount, 10)\r\n        });\r\n      }\r\n\r\n      // Check whether you already have voted\r\n      const hasVoted = await this.contract.methods.voters(accounts[0]).call();\r\n\r\n      // Set web3, accounts, and contract to the state, and then proceed with an\r\n      // example of interacting with the contract's methods.\r\n      this.setState({\r\n        loading: false,\r\n        account: accounts[0],\r\n        candidates,\r\n        hasVoted\r\n      });\r\n    } catch (error) {\r\n      this.setState({ loading: false }, () => {\r\n        // Catch any errors for any of the above operations.\r\n        alert(\r\n          `Failed to load web3, accounts, or contract. Check console for details.`,\r\n        );\r\n        console.error(error);\r\n      });\r\n    }\r\n  }\r\n\r\n  getWeb3 = () => new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener('load', () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          window.ethereum.enable().then(data => {\r\n            // Acccounts now exposed\r\n            resolve(web3);\r\n          });\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider('http://127.0.0.1:7545');\r\n        const web3 = new Web3(provider);\r\n        console.log('No web3 instance injected, using Local web3.');\r\n        resolve(web3);\r\n      }\r\n    });\r\n  })\r\n\r\n  watchEvents() {\r\n    this.contract.events.votedEvent({\r\n      fromBlock: 0,\r\n      toBlock: 'latest'\r\n    }, (error, event) => {\r\n      console.log('votedEvent', event);\r\n      if (!error) {\r\n        const candidates = cloneDeep(this.state.candidates);\r\n        for (let i = 0; i < candidates.length; i++) {\r\n          if (candidates[i].id === event.returnValues._candidateId) {\r\n            candidates[i].voteCount++;\r\n            break;\r\n          }\r\n        }\r\n        this.setState({ candidates });\r\n      }\r\n    }).on('data', event => {\r\n      console.log('votedEvent data', event);\r\n    }).on('error', console.error);\r\n  }\r\n\r\n  onChangeCandidate = (e) => {\r\n    this.setState({ activeId: e.target.value });\r\n  }\r\n\r\n  onCastVote = () => {\r\n    this.setState({ loading: true });\r\n    const gasPrice = this.web3.utils.toWei('0', 'gwei');\r\n    this.contract.methods.vote(this.state.activeId).send({\r\n      gas: 0,\r\n      gasPrice,\r\n      from: this.state.account\r\n    }).on('transactionHash', (hash) => {\r\n      console.log('Hash');\r\n    }).on('receipt', (receipt) => {\r\n      console.log('Receipt');\r\n    }).on('confirmation', (confirmationNumber, receipt) => {\r\n      console.log('Confirmed');\r\n    }).on('error', console.error).then(result => {\r\n      this.setState({\r\n        loading: false,\r\n        hasVoted: true\r\n      });\r\n    }).catch(error => {\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n  render = () => (\r\n    <div className=\"App\">\r\n      <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\r\n        <Title level={3}>Election Results</Title>\r\n        <Title level={5}>Your Account: {this.state.account}</Title>\r\n        <Table columns={columns} dataSource={this.state.candidates} rowKey=\"id\" />\r\n        {this.state.hasVoted ? (\r\n          <Title level={5}>Already you have voted</Title>\r\n        ) : (\r\n          <Space size=\"large\">\r\n            <Radio.Group value={this.state.activeId} onChange={this.onChangeCandidate}>\r\n              {this.state.candidates.map((candidate, index) => (\r\n                <Radio\r\n                  key={index}\r\n                  value={candidate.id}\r\n                >{candidate.name}</Radio>\r\n              ))}\r\n            </Radio.Group>\r\n            <Button\r\n              type=\"primary\"\r\n              size=\"large\"\r\n              onClick={this.onCastVote}\r\n              disabled={this.state.activeId === 0}\r\n            >Vote</Button>\r\n          </Space>\r\n        )}\r\n      </Space>\r\n      {this.state.loading && (\r\n        <div style={{\r\n          position: 'absolute',\r\n          top: 0,\r\n          left: 0,\r\n          width: '100vw',\r\n          height: '100vh',\r\n          backgroundColor: 'rgba(255, 255, 255, 0.8)',\r\n          display: 'flex',\r\n          justifyContent: 'center',\r\n          alignItems: 'center'\r\n        }}>\r\n          <Spin />\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}